
float lng_filt(float kef){
	float longitude = 0.0;
	float k_lng_deg=(kef*0.01);
	unsigned int deglng = (int)k_lng_deg;
	if(deglng > 68 && 97 > deglng){
		float seclng = (kef- (float)deglng*100)/60;
		longitude = (float)deglng + seclng;

	}

	return longitude;
}

float lat_filt(float def) {
	float latitude = 0.0;
	float k_lat_deg=(def*0.01);
	unsigned int deg = (int)k_lat_deg;
	if(deg > 8 && 37 > deg){
		float sec = (def- (float)deg*100)/60;
		latitude = (float)deg + sec;
	}

	return latitude;
}



double update_filter(double measurement, double predict, double gain){
	double update = predict + gain*(measurement-predict);
	return update;

}

float ratof(char *arr)
{
  float val = 0;
  int afterdot=0;
  float scale=1;
  int neg = 0;

  if (*arr == '-') {
    arr++;
    neg = 1;
  }
  while (*arr) {
    if (afterdot) {
      scale = scale/10;
      val = val + (*arr-'0')*scale;
    } else {
      if (*arr == '.')
    afterdot++;
      else
    val = val * 10.0 + (*arr - '0');
    }
    arr++;
  }
  if(neg) return -val;
  else    return  val;
}


double initial_bearing(double lat_a,double lat_b,double lon_a,double lon_b){
	double delta_lng;
	double lat1=ConvertDegtoRad(lat_a);
	double lat2=ConvertDegtoRad(lat_b);
	double lon1=ConvertDegtoRad(lon_a);
	double lon2=ConvertDegtoRad(lon_b);

	delta_lng = lon2-lon1;
	float y = sin(delta_lng) * cos(lat2);
	float x = cos(lat1)*sin(lat2) -sin(lat1)*cos(lat2)*cos(delta_lng);
	double bearing= ConvertRadtoDeg(atan2(y,x));

	double final;
	if (bearing>0){
		final=bearing;
		}else {
		final=360+bearing;
	}

	return final;
}

double conv_rhumb(double pts[],double pts_p[]){
	float delta_lng,mean_lat;
	delta_lng = pts[1]-pts_p[1];
	mean_lat = (pts[0] + pts_p[0])/2;
	double rad = ConvertDegtoRad((double)mean_lat);
	double con =(double)(delta_lng * sin(rad));
	return con;
}
double distance(double lat1,double lat2,double lon1,double lon2){


	double  dlon = ConvertDegtoRad(lon2 - lon1) ;
	double dlat = ConvertDegtoRad(lat2 - lat1) ;
	double deg_lat1 = ConvertDegtoRad(lat1);
	double deg_lat2 = ConvertDegtoRad(lat2);
	double a= sin(dlat/2)*sin(dlat/2) + (cos(deg_lat1) * cos(deg_lat2))* (sin(dlon/2)*sin(dlon/2));
	double c=2 * atan2(sqrt(a),sqrt(1-a));
	double R= 6371000.0 ;
	double dist=c*R;
	return dist;
}
/*
double cross_track_error(double cur_n,double bear_way, double curr_bear){
	double R= 6371000.0;
	double ang_disc = cur_n / R;
	double delta_bearing =ConvertDegtoRad( curr_bear - bear_way);
	double values= sin(ang_disc)*sin(delta_bearing);
	double cte= asin(values)*R;
	return cte;
}
*/
double cross_track_error(double cur_n,double bear_way, double curr_bear){
	double delta_bearing =ConvertDegtoRad( curr_bear - bear_way);
	double perd = cur_n*sin(delta_bearing);
	return perd;
}


float along_track_error(double curk,double cte_n){
	float alg = sqrt((curk*curk) - (cte_n*cte_n));
	return alg;
}

double ConvertDegtoRad(double degree) {
	double pi = 3.14159265359;
	return (degree * (pi /180));
}


double ConvertRadtoDeg(double radians) {
	double pi = 3.14159265359;
	return (radians * (180 /pi));
}

int pidheading(double val,double spoint,double kp,double ki,double kd){
	int steer,start_ht, final_ht=0;
	float prev_errorh,error_h=0.0;
	double elapsedTime_h, head_h;
	long int PID_valueh = 0;
	double setPoint_h, integral_h=0.0, derivative_h=0.0;
	setPoint_h = spoint;
	start_ht = HAL_GetTick();
	error_h = (float)(setPoint_h - val);

	if(error_h<-180.0){
		error_h=error_h+360.0;
	}
	else if(error_h>180.0){
		error_h=error_h-360.0;
	}

	elapsedTime_h = (double)(final_ht - start_ht);
	integral_h += ((double)(error_h * elapsedTime_h));
	derivative_h = ((double)(error_h - prev_errorh)) / elapsedTime_h;
	PID_valueh = (int)(kp *error_h + ki * integral_h + kd * derivative_h);
	prev_errorh = error_h;
	final_ht = start_ht;
	long int dutyCycleh = Constrain(PID_valueh, -4096, 4096);
	int vah = MAP(dutyCycleh, -4096, 4096, 0, 255);
	steer =(int)((1.76*0.0001*vah*vah)-(0.335*vah) + 91);
    return steer;
}



int MAP(int au32_IN, long int au32_INmin, long int au32_INmax, int au32_OUTmin,int au32_OUTmax) {
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
	/ (au32_INmax - au32_INmin)) + au32_OUTmin);
}

int Constrain(int au32_IN, int au32_MIN, int au32_MAX) {
	if (au32_IN < au32_MIN) {
		return au32_MIN;
		} else if (au32_IN > au32_MAX) {
		return au32_MAX;
		} else {
		return au32_IN;
	}
}
